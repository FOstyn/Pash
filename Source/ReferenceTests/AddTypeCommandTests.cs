// Copyright (C) Pash Contributors. License: GPL/BSD. See https://github.com/Pash-Project/Pash/
using System;
using System.Collections.Generic;
using System.Management.Automation;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

namespace ReferenceTests
{
    [TestFixture]
    public class AddTypeCommandTests : ReferenceTestBase
    {
        [Test]
        public void AddTypeAddsAssemblyToCurrentAppDomain()
        {
            string result = ReferenceHost.Execute(
@"Add-Type -AssemblyName 'Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
[System.AppDomain]::CurrentDomain.GetAssemblies() | Foreach-Object { $_.fullname.split(',')[0] }
");

            StringAssert.Contains("Microsoft.Build" + Environment.NewLine, result);
        }

        [Test]
        public void TypesFromAddedAssemblyAvailable()
        {
            string result = ReferenceHost.Execute(
@"Add-Type -AssemblyName 'Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
[Microsoft.Build.Evaluation.Project].FullName
");

            StringAssert.Contains("Microsoft.Build.Evaluation.Project" + Environment.NewLine, result);
        }

        [Test]
        public void AddTypeDefinition()
        {
            string result = ReferenceHost.Execute(
@"$source = 'public class AddTypeDefinitionTestClass { }'
Add-Type -typedefinition $source
[AddTypeDefinitionTestClass].FullName"
);
            StringAssert.Contains("AddTypeDefinitionTestClass" + Environment.NewLine, result);
        }

        [Test]
        public void AddTypeDefinitionWithInvalidCSharpCode()
        {
            Exception ex = Assert.Throws(Is.InstanceOf(typeof(Exception)), () => {
                ReferenceHost.RawExecute("Add-Type -TypeDefinition 'public class ErrorTest --'");
            });
            Assert.AreEqual("Cannot add type. There were compilation errors.", ex.Message);
            // TODO: Exception should be CmdletInvocationException
            // TODO: Does not work with pash. Pash does not have the error records in the pipeline.
            // They are in a nested pipeline but do not reach the main pipeline
            //ErrorRecord[] errorRecords = ReferenceHost.GetLastRawErrorRecords();
            //Assert.AreEqual(3, errorRecords.Length, "Should be 3 compiler errors");
        }

        [Test]
        public void AddTypeDefinitionAndCallMethodOnNewInstance()
        {
            string result = ReferenceHost.Execute(
@"$source = 'public class AddTypeDefinitionAndCallMethodOnNewInstanceTestClass { public string WriteLine() { return ""Test""; } }'
Add-Type -typedefinition $source
$obj = New-Object AddTypeDefinitionAndCallMethodOnNewInstanceTestClass
$obj.WriteLine()"
);
            StringAssert.Contains("Test" + Environment.NewLine, result);
        }

        [Test]
        public void AddTypeDefinitionWithReferencedAssemblies()
        {
            string result = ReferenceHost.Execute(
@"$source = 'public class AddTypeDefinitionWithReferencedAssembliesTestClass { public string WriteLine() { return ""Name="" + typeof(System.Xml.XmlDocument).Name; } }'
Add-Type -typedefinition $source -ReferencedAssemblies 'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
$obj = New-Object AddTypeDefinitionWithReferencedAssembliesTestClass
$obj.WriteLine()"
);
            StringAssert.Contains("Name=XmlDocument" + Environment.NewLine, result);
        }

        [Test]
        public void AddTypeDefinitionWithReferencedAssembliesByFileName()
        {
            string fileName = Assembly.ReflectionOnlyLoad("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089").Location;
            string result = ReferenceHost.Execute(
                NewlineJoin(
"$source = 'public class AddTypeDefinitionWithReferencedAssembliesByFileNameTestClass { public string WriteLine() { return \"Name=\" + typeof(System.Xml.XmlDocument).Name; } }'",
"Add-Type -typedefinition $source -ReferencedAssemblies '" + fileName + "'",
"$obj = New-Object AddTypeDefinitionWithReferencedAssembliesByFileNameTestClass",
"$obj.WriteLine()")
);
            StringAssert.Contains("Name=XmlDocument" + Environment.NewLine, result);
        }

        [Test]
        public void AddMemberDefinitionWithoutSpecifyingNamespace()
        {
            string result = ReferenceHost.Execute(
@"$method = 'public string WriteLine() { return ""Test""; }'
Add-Type -MemberDefinition $method -Name ""AddMemberDefinitionUsingDefaultNamespaceTestClass""
$obj = New-Object Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.AddMemberDefinitionUsingDefaultNamespaceTestClass
$obj.WriteLine()
"
);
            StringAssert.Contains("Test" + Environment.NewLine, result);
        }

        [Test]
        public void AddMemberDefinitionSpecifyingTypeNamespace()
        {
            string result = ReferenceHost.Execute(
@"$method = 'public string WriteLine() { return ""Test""; }'
Add-Type -MemberDefinition $method -Name ""AddMemberDefinitionSpecifyingTypeNamespaceTestClass"" -Namespace ""AddTypeCommandNamespace""
$obj = New-Object AddTypeCommandNamespace.AddMemberDefinitionSpecifyingTypeNamespaceTestClass
$obj.WriteLine()
"
);
            StringAssert.Contains("Test" + Environment.NewLine, result);
        }

        [Test]
        public void AddMemberDefinitionReferencesSystemAndSystemRuntimeInteropServicesByDefault()
        {
            string result = ReferenceHost.Execute(
@"$method = 'public String WriteLine() { return typeof(DllImportAttribute).Name; }'
Add-Type -MemberDefinition $method -Name ""AddMemberDefinitionUsingNamespaceReferencesTestClass"" -Namespace ""AddTypeCommandNamespace""
$obj = New-Object AddTypeCommandNamespace.AddMemberDefinitionUsingNamespaceReferencesTestClass
$obj.WriteLine()
"
);
            StringAssert.Contains("DllImportAttribute" + Environment.NewLine, result);
        }
        
        [Test]
        public void AddMemberDefinitionImportingNamespace()
        {
            string result = ReferenceHost.Execute(
@"$method = 'public String WriteLine() { return typeof(Debugger).FullName; }'
Add-Type -MemberDefinition $method -UsingNamespace System.Diagnostics -Name ""AddMemberDefinitionImportingNamespaceTestClass"" -Namespace ""AddTypeCommandNamespace""
$obj = New-Object AddTypeCommandNamespace.AddMemberDefinitionImportingNamespaceTestClass
$obj.WriteLine()
"
);
            StringAssert.Contains("System.Diagnostics.Debugger" + Environment.NewLine, result);
        }

        [Test]
        public void AddMemberDefinitionWithInvalidCSharp()
        {
            Exception ex = Assert.Throws(Is.InstanceOf(typeof(Exception)), () => {
                ReferenceHost.RawExecute("add-type -name Test -memberdefinition 'public WriteLine() ---'");
            });
            Assert.AreEqual("Cannot add type. There were compilation errors.", ex.Message);
            // TODO: Exception should be CmdletInvocationException
            // TODO: Does not work with pash. Pash does not have the error records in the pipeline.
            // They are in a nested pipeline but do not reach the main pipeline
            //ErrorRecord[] errorRecords = ReferenceHost.GetLastRawErrorRecords();
            //Assert.AreEqual(2, errorRecords.Length, "Should be 2 compiler errors");
        }
    }
}
